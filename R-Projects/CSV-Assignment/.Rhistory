source("~/Documents/GitHub/TTA-Artificial-Intelligience-Course/R-Projects/CSV-Assignment/Customer_Data.R")
source("~/Documents/GitHub/TTA-Artificial-Intelligience-Course/R-Projects/CSV-Assignment/Customer_Data.R")
name <- "Jack"
age <- 37
name # Output: Jack
age # Output: 37
num <- 5
text <- "Some text"
var1 <- var2 <- var3 <- "Banana"
var1
var2
var3
va <- 184
va <- "Guy"
#Vector of strings
veggies <= c()â†„
#Vector of strings
veggies <= c()
#Vector of strings
veggies <= c("broccoli", "squash", "Carrot")
veggies
#Vector of strings
veggies <- c("broccoli", "squash", "Carrot")
veggies
veggies
# Vector with numerical values in a sequence
nums <- 1:25:3
numbers
veggies
# Vector with numerical values in a sequence
nums <- 1:25:3
numbers
# Vector with numerical values in a sequence
nums <- 1:25:3
nums
# Vector with numerical values in a sequence
nums <- 1:25
nums
# Access specific items in a vector
veggies[0]
# Access specific items in a vector
veggies[1]
# Access specific items in a vector
veggies[1, 3]
# Access specific items in a vector
veggies[1,][3]
# Access specific items in a vector
veggies[1][3]
# Access specific items in a vector
veggies[1]
# Change item value in avector
fruit <- c("apple", "orange", "banana")
fruit
fruit[2] <- "mango"
fruit
# Change item value in a vector
fruit <- c("apple", "orange", "banana")
fruit
fruit[2] <- "mango"
fruit
fruit[1] <- fruit[3]
fruit[3] <- "apple"
fruit
# List of strings
heros <- list("superman", "batman", "spiderman")
heros
# Access item in list
heros[1]
heros
# Change value in list
heros[1] <- "hulk"
heros
# List of strings
heros <- list("superman", "batman", "spiderman")
heros
# Change value in list
heros[1] <- "hulk"
amatrix
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 2)
amatrix
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 3)
amatrix
amatrix[2,1]
newmatrix <- cbind(amatrix, c("cucumber", "spinach"))
newmatrix <- cbind(amatrix, c(30, 60))
newmatrix <-=-=---5r4oe54ideriodgomiv
newmatrix <- cbind(amatrix(15, 25))
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 2)
amatrix
amatrix[2,1]
newmatrix <- cbind(amatrix(15, 25))
newmatrix <- cbind(amatrix, c(15, 25))
amatrix[2,1]
newmatrix <- cbind(amatrix, c(15, 25))
newmatrix
newmatrix <- cbind(amatrix, c(15, 25), 35)
newmatrix
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 2)
amatrix
amatrix[2,1]
newmatrix <- cbind(amatrix, c(15, 25), 35)
newmatrix
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 2)
amatrix
amatrix[2,1]
newmatrix <- cbind(amatrix, c(15, 25, 35)
# Create a matrix
amatrix <- matrix(c(10, 20, 30, 40, 50, 60), nrow = 3, ncol = 2)
amatrix
amatrix[2,1]
newmatrix <- cbind(amatrix, c(15, 25, 35))
newmatrix
mymatrix <- matrix(c("red", "green", "black", "Yellow"), nrow = 2, ncol = 2)
mymatrix <- matrix(c("red", "green", "black", "Yellow"), nrow = 2, ncol = 2)
for (rows in 1:nrow(mymatrix)){
for (cols in 1:ncol(mymatrix)){
mymatrix[rows, cols]
}
}
for (rows in 1:nrow(mymatrix)){
for (cols in 1:ncol(mymatrix)){
print(mymatrix[rows, cols])
}
}
# Create and combine matrices
colors1 <- matrix(c("red", "blue", "green", "yellow"), nrow = 2, ncol = 2)
# Combining rows
combRows = rbin(coloors, colors2)
combRows
# Combining rows
combRows <- rbind(coloors, colors2)
# Combining rows
combRows <- rbind(colors1, colors2)
# Create and combine matrices
colors1 <- matrix(c("red", "blue", "green", "yellow"), nrow = 2, ncol = 2)
colors2 <- matrix(c("black", "white", "brown", "orange"), nrow = 2, ncol = 2)
# Combining rows
combRows <- rbind(colors1, colors2)
combRows
# Combining as columns
combCols <- cbind(colors1, colors2)
combCols
# Create a one-dimensional array
array_1d <- array(c(1, 2, 3, 4), dim = c(4))
array_1d
# Create a one-dimensional array
array_1d <- array(c(1, 2, 3, 4), dim = c(3))
array_1d
# Create a one-dimensional array
array_1d <- array(c(1, 2, 3, 4))
array_1d
# Create a 2-dimensional array
array_2d <- array(c(1:6), dim = c(3,2))
array_2d
# Create a 2-dimensional array
array_2d <- array(c(1, 2, 3, 4, 5, 6), dim = c(3,2))
array_2d
# Create a 2-dimensional array
array_2d <- array(c(1:6), dim = c(3,2))
array_2d
source("~/Documents/GitHub/TTA-Artificial-Intelligience-Course/R-Projects/CSV-Assignment/Arrays.R")
# Create a one-dimensional array
array_1d <- array(c(1, 2, 3, 4), dim = c(4))
print(array_1d)
source("~/Documents/GitHub/TTA-Artificial-Intelligience-Course/R-Projects/CSV-Assignment/Arrays.R")
# Create a 3-dimensional array
array_3d <- array(c(1:12), dim = c(3,4))
print(array_3d)
# Create a 3-dimensional array
array_3d <- array(c(1:12), dim = c(2, 3, 2))
print(array_3d)
# Accessing elements in 1d array
element_1d <- array_1d[2]
print(element_1d)
# Accessing elements in a 2d array
element_2d <- array_2d[2, 3]
# Accessing elements in a 2d array
element_2d <- array_2d[3, 1]
print(element_2d)
#accessing elements in a 3d array
element_3d <- array_4d(1, 2, 1)
#accessing elements in a 3d array
element_3d <- array_3d(1, 2, 1)
# Create a 3-dimensional array
array_3d <- array(c(1:12), dim = c(2, 3, 2))
#accessing elements in a 3d array
element_3d <- array_3d(1, 2, 1)
#accessing elements in a 3d array
element_3d <- array_3d[1, 2, 1]
print(element_3d)
# Check dimensions of an array
dimensions <- dim(array_3d)
print(dimensions)
print(dimensions)
# Find total number of dimensions in array
num_dims <- length(dim(array_2d))
print(num_dims)
# Find total number of elements in array
num_els <- length(array_23)
print(num_els)
# Find total number of elements in array
num_els <- length(array_3d)
print(num_els)
# Create a data frame
dFrame <- data.frame(
Name = c("Jordan", "Arnold", "Lucy"),
Age = c(27, 27, 5),
Married = c(TRUE, FALSE, TRUE)
)
print(dFrame)
# Using $ notation
names <- dFrame$Name
ages <- dFrame$Age
mStatus <- dFrame$Married
print(names)
print(ages)
print(mStatus)
# Accessing columns using indexing
names <- dFrame[, "Name"]
ages <- dFrame[, "Age"]
mStatus <- dFrame[, "Married"]
print(names)
print(ages)
print(mStatus)
# Summarize the data frame
summary(dFrame)
# Adding new row to data frame
nRow <- data.frame(
Name = "Bob",
Age = 40,
Married = TRUE
)
udFrame = rbind(dFrame, nRow)
print(udFrame)
# Adding new column to data frame
nCol = c(TRUE, FALSE, TRUE, FALSE)
dFrame = cbind (udFrame, Employed = nCol)
print(dFrame)
# Adding new column to data frame
nCol = c(TRUE, FALSE, FALSE, TRUE)
dFrame = cbind (udFrame, Employed = nCol)
print(dFrame)
# Create a factor
category <- factor(c("A", "B", "A", "A"))
category
# Access second element of factor
element_2 <- colors[2]
print(element_2)
# Create a factor
colors <- factor(c("Red", "Green", "Blue", "Yellow"))
# Access second element of factor
element_2 <- colors[2]
print(element_2)
print(element_2)
# Combine data frames
dFrame2 = data.frame(
Name = c("Bob", "Sally"),
Age = c(40, 23),
Married = c(TRUE, FALSE),
Employed = c(TRUE, TRUE)
)
# Combine Vertically
dFrame3v <- rbind(dFrame, dFrame2)
dFrame3v
# Combine Horizontally
dFrame3h <- cbind(dFrame, dFrame2)
dFrame3h
# Identify duplicate rows
dupRows = duplicated(dFrame3v)
dupRows
dFrame3v
# Identify duplicate rows
dupRows = duplicated(dFrame3v)
dupRows
# Remove duplicate rows
newDF <- dFrame3v[!duplicate_rows, ]
# Remove duplicate rows
newDF <- dFrame3v[!dupRows, ]
newDF
plot(1, 3)
plot(1:!0, type = "1")
plot(1:!0, type = "l")
plot(1:!0, type = "l", col = "orange")
plot(1:10, type = "l")
plot(1:10, type = "l", col = "orange")
x <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
y <- c(50, 45, 55, 60, 65, 70, 75, 80, 85, 90)
plot(x, y, type = "b", col = "blue", pch = 16, main = "Scatter Plot", xlab = "x", ylab = "y")
# Define the x-coordinates for car age
x <- c(6, 8, 10, 8, 3, 11, 5, 13, 14, 11, 8)
# Define the y-coordinates for car speed
y <- c(100, 88, 89, 90, 113, 105, 89, 96, 80, 79, 87, 88)
# Create a scatter plot to visualize the observation of cars
plot(x, y, main = "Observation of Cars", xlab = "Car Age", ylab = "Car Speed")
# Define the x-coordinates for car age
x <- c(6, 8, 10, 8, 3, 11, 5, 13, 14, 11, 8)
# Define the y-coordinates for car speed
y <- c(100, 88, 89, 90, 113, 105, 89, 96, 80, 79, 87, 88)
# Create a scatter plot to visualize the observation of cars
plot(x, y, main = "Observation of Cars", xlab = "Car Age", ylab = "Car Speed")
# Define the x-coordinates for car age
x <- c(6, 8, 10, 8, 3, 11, 5, 13, 14, 11, 8, 5)
# Define the y-coordinates for car speed
y <- c(100, 88, 89, 90, 113, 105, 89, 96, 80, 79, 87, 88)
# Create a scatter plot to visualize the observation of cars
plot(x, y, main = "Observation of Cars", xlab = "Car Age", ylab = "Car Speed")
# Create vectors for the age and speed of cars on day one
x1 <- c(4, 6, 3, 8, 9, 7, 10, 5, 11, 2, 12, 7)
y1 <- c(80, 85, 89, 92, 94, 88, 97, 82, 78, 111, 86, 87)
# Create vectors for the age and speed of cars on day two
x2 <- c(1, 7, 8, 9, 4, 12, 2, 6, 15, 7, 11, 3, 14, 2, 10)
y2 <- c(105, 88, 84, 95, 94, 80, 105, 89, 90, 112, 79, 100, 80, 91, 97)
# Create a scatter plot of car age and speed for day one, with customized settings
plot(x1, y1, main = "Observation of Cars", xlab = "Car Age", ylab = "Car Speed", col = "red", cex = 2)
# Add points for the scatter plot of car age and speed for day two, with customized settings
points(x2, y2, col = "blue", cex = 2)
# Create a vector of pies
x <- c(12, 18, 24, 30)
# Create a vector of labels
mylabel <- c("Oranges", "Pineapples", "Grapes", "Watermelons")
# Display the pie chart with labels
pie(x, label = mylabel, main = "Fruit Distribution")
# x-axis values
x <- c("E", "F", "G", "H")
# y-axis values
y <- c(3, 5, 7, 9)
# Generate a vertical bar chart with four bars, labeled E, F, G, and H.
barplot(y, names.arg = x)
# Change the color of the bars to blue, enhancing the visual representation.
barplot(y, names.arg = x, col = "blue")
?mtcars
dataCars <- mtcars
dim(dataCars)
names(dataCars)
rownames(dataCars)
sort(dataCars$cyl)
summary(dataCars)
max(dataCars$hp)
min*dataCars$hp)
min(dataCars$hp)
rowname(dataCars)[which.max(dataCars$hp)]
rownames(dataCars)[which.max(dataCars$hp)]
rownames(dataCars)[which.min(dataCars$hp)]
mean(dataCars$wt)
